---
interface Props {
  title: string;
  description?: string;
}

const { 
  title, 
  description = "CronoTerrario - Un microecosistema autosuficiente que combina la naturaleza con el tiempo en un diseño único y cautivador."
} = Astro.props;
---

<!doctype html>
<html lang="es" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/og-image.jpg" />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content="/og-image.jpg" />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Merriweather:wght@400;700&display=swap" rel="stylesheet">
    
    <!-- 3D Model Viewer -->
    <script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/4.0.0/model-viewer.min.js"></script>
    
    <title>{title}</title>
  </head>
  <body class="bg-earth-50 text-earth-950">
    <slot />
    <script>
      // Modal functionality
      document.addEventListener('DOMContentLoaded', () => {
        const modalTriggers = document.querySelectorAll('[data-modal-trigger]');
        const modals = document.querySelectorAll('[data-modal]');
        const closeButtons = document.querySelectorAll('[data-modal-close]');
        
        modalTriggers.forEach(trigger => {
          trigger.addEventListener('click', () => {
            const modalId = trigger.getAttribute('data-modal-trigger');
            const modal = document.querySelector(`[data-modal="${modalId}"]`);
            if (modal) {
              modal.classList.remove('hidden');
              document.body.classList.add('overflow-hidden');
            }
          });
        });
        
        closeButtons.forEach(button => {
          button.addEventListener('click', () => {
            const modal = button.closest('[data-modal]');
            if (modal) {
              modal.classList.add('hidden');
              document.body.classList.remove('overflow-hidden');
            }
          });
        });
        
        modals.forEach(modal => {
          modal.addEventListener('click', (e) => {
            if (e.target === modal) {
              modal.classList.add('hidden');
              document.body.classList.remove('overflow-hidden');
            }
          });
        });
        
        // Gallery navigation
        const galleryPrev = document.getElementById('gallery-prev');
        const galleryNext = document.getElementById('gallery-next');
        const galleryItems = document.querySelectorAll('[data-gallery-item]');
        let currentIndex = 0;
        
        function updateGallery() {
          galleryItems.forEach((item, index) => {
            if (index === currentIndex) {
              item.classList.remove('hidden');
            } else {
              item.classList.add('hidden');
            }
          });
        }
        
        if (galleryPrev && galleryNext && galleryItems.length > 0) {
          galleryPrev.addEventListener('click', () => {
            currentIndex = (currentIndex - 1 + galleryItems.length) % galleryItems.length;
            updateGallery();
          });
          
          galleryNext.addEventListener('click', () => {
            currentIndex = (currentIndex + 1) % galleryItems.length;
            updateGallery();
          });
        }
      });
    </script>
  </body>
</html>